# Project Development Checklist
**Lyfe Supertask Knowledge Generator - Development Protocol**

## üîÑ MANDATORY TODO IMPLEMENTATION PROTOCOL
**EVERY TODO IMPLEMENTATION MUST FOLLOW THIS EXACT SEQUENCE**

### Phase 0: Current State Analysis ‚úÖ
- [ ] **Inspect current implementation** thoroughly
  - Search codebase for existing related functionality
  - Identify potential code reuse opportunities  
  - Document what's already implemented vs. what needs creation
  - Check for similar patterns in existing modules
- [ ] **Generate feature PRD** under `docs/features/`
  - Create `docs/features/[todo-name]-feature.md`
  - Document requirements, implementation approach, and dependencies
  - Include analysis of existing code to avoid duplication
  - Define clear success criteria and testing strategy

### Phase 1: Pre-Implementation ‚úÖ
- [ ] **Mark TODO as `in_progress`** using `todo_write` tool
- [ ] **Analyze requirements** and understand dependencies
- [ ] **Plan implementation** with clear deliverables based on PRD
- [ ] **Identify test strategy** (unit, integration, mocking needs)
- [ ] **Review existing codebase** to avoid reimplementation

### Phase 2: Implementation ‚úÖ
- [ ] **Implement core functionality** following user rules and best practices
- [ ] **Reuse existing code** where appropriate (DRY principle)
- [ ] **Write comprehensive tests** covering all scenarios
- [ ] **Ensure code follows** DRY, YAGNI, KISS principles
- [ ] **Add proper error handling** and logging
- [ ] **Create defensive tests** for edge cases and error scenarios

### Phase 3: Testing & Quality Assurance ‚úÖ
- [ ] **Run ALL tests** and ensure 100% pass rate
  ```bash
  source venv/bin/activate && python -m pytest tests/ -v
  ```
- [ ] **Fix ANY failing tests** immediately - NO EXCEPTIONS
- [ ] **Verify integration** with existing components
- [ ] **Test CLI commands** manually if applicable
- [ ] **Test with real data** when possible

### Phase 4: Documentation Updates ‚úÖ
- [ ] **Update TODO.md** with completed status and implementation details
  - Mark TODO as ‚úÖ COMPLETED
  - Add implementation checklist with all features
  - Add testing results and file references
  - Add documentation reference
- [ ] **Update or create implementation documentation**
  - If `docs/features/implementation-summary.md` > 3000 lines, create new file
  - Create `docs/features/implementation-summary-[phase].md` for new TODOs
  - Document all methods, classes, and key features
  - Include test results and file statistics
  - Add code examples and usage patterns
- [ ] **Update feature PRD** with final implementation details
- [ ] **Update TODO list** using `todo_write` tool to mark as completed

### Phase 5: Final Verification ‚úÖ
- [ ] **Run complete test suite** one final time
  ```bash
  source venv/bin/activate && python -m pytest tests/ -v --tb=short
  ```
- [ ] **Verify all tests pass** (100% success rate required)
- [ ] **Review implementation** against original requirements
- [ ] **Confirm no regressions** in existing functionality

---

## üß™ ENHANCED TESTING REQUIREMENTS

### Current Implementation Inspection Protocol
1. **Search existing codebase** for related functionality
2. **Identify reusable components** and patterns
3. **Document gaps** between existing and required functionality
4. **Plan integration** with existing systems
5. **Avoid duplication** of existing functionality

### Test Coverage Standards
- **Unit Tests**: All public methods and functions
- **Integration Tests**: Component interactions and existing system integration
- **Error Handling**: All error scenarios and edge cases
- **CLI Tests**: All commands, options, and error paths
- **Regression Tests**: Ensure existing functionality still works
- **Real Data Tests**: Test with actual sample data when available

### Test Execution Protocol
1. **Run full test suite** before starting implementation
2. **Run tests after each major change** during implementation
3. **Fix ALL failing tests** immediately - no exceptions
4. **Achieve 100% pass rate** on implemented functionality
5. **Add new tests** for new functionality
6. **Verify test isolation** - tests should not depend on each other
7. **Final verification** - complete test suite must pass

---

## üìù ENHANCED DOCUMENTATION STANDARDS

### Feature PRD Requirements
Create `docs/features/[todo-name]-feature.md` with:
```markdown
# [TODO Name] - Feature Requirements Document

## Overview
[Brief description of what needs to be implemented]

## Current State Analysis
### Existing Implementation
- [What's already implemented that's relevant]
- [Existing patterns that can be reused]
- [Current gaps that need to be filled]

### Code Reuse Opportunities
- [Existing modules that can be extended]
- [Patterns to follow from current codebase]
- [Dependencies on existing components]

## Requirements
### Functional Requirements
- [List of specific features to implement]

### Non-Functional Requirements  
- [Performance, security, maintainability requirements]

## Implementation Approach
### Architecture
- [How this fits into existing system]
- [New components to create]
- [Existing components to modify]

### Testing Strategy
- [Types of tests needed]
- [Test data requirements]
- [Integration testing approach]

## Success Criteria
- [Measurable success criteria]
- [Performance benchmarks]
- [Quality gates]

## Dependencies
- [Other TODOs this depends on]
- [External dependencies]
- [System requirements]
```

### Implementation Documentation
- **For new phase implementations**: Create `docs/features/implementation-summary-[phase].md`
- **For existing file extensions**: Continue using `docs/features/implementation-summary.md`
- **File size limit**: 3000 lines per file - create new files beyond this limit

### TODO.md Updates
```markdown
### [TODO_NUMBER]. [todo-id] ‚úÖ
**Status**: ‚úÖ COMPLETED  
**Dependencies**: [dependency-list]  
**Description**: [Original description]
**PRD**: `docs/features/[todo-name]-feature.md`
**Implementation**: 
- ‚úÖ **Current State Analysis**: Inspected existing implementation and identified reuse opportunities
- ‚úÖ **Feature PRD**: Complete requirements and implementation approach documented
- ‚úÖ **Core Functionality**: [Feature 1 with details]
- ‚úÖ **Integration**: Successfully integrated with existing components
- ‚úÖ **Error Handling**: Comprehensive error scenarios covered
- ‚úÖ **Testing**: [X] comprehensive tests with 100% pass rate
- ‚úÖ **Documentation**: Documented in [implementation-file]
**Files Created/Modified**:
- `[file1]` - [description] ([X] lines)
- `[file2]` - [description] ([Y] lines)
```

---

## üîß ENHANCED IMPLEMENTATION STANDARDS

### Current Implementation Analysis Requirements
- **Codebase Search**: Use semantic and grep search to find related functionality
- **Pattern Recognition**: Identify existing patterns to follow or extend
- **Code Reuse**: Leverage existing utilities, base classes, and helper functions
- **Integration Points**: Identify how new code integrates with existing systems
- **Dependency Analysis**: Understand what existing code the new implementation depends on

### Code Quality Requirements
- **DRY Principle**: Eliminate code duplication by reusing existing components
- **YAGNI Principle**: Avoid premature optimization and over-engineering
- **KISS Principle**: Keep implementations simple and clear
- **Error Handling**: Comprehensive error catching and logging using existing patterns
- **Type Hints**: Use type hints consistent with existing codebase style
- **Docstrings**: Document all public methods and classes following existing format

### Integration Requirements
- **Existing Patterns**: Follow established patterns in the codebase
- **Configuration**: Use existing configuration loading mechanisms  
- **Logging**: Use existing logging setup and patterns
- **CLI Integration**: Extend existing CLI structure and commands
- **Testing Integration**: Use existing test utilities and fixtures

---

## üö® ENHANCED FAILURE RECOVERY PROTOCOL

### If Current Implementation Analysis Incomplete
1. **STOP implementation** immediately
2. **Complete codebase analysis** thoroughly
3. **Update feature PRD** with findings
4. **Identify all reuse opportunities** before proceeding
5. **Document integration approach** clearly

### If Tests Fail During Implementation
1. **STOP implementation** immediately
2. **Analyze failure** root cause - existing vs. new code
3. **Fix failing tests** before proceeding
4. **Re-run full test suite** to verify fix
5. **Document fix** if it affects implementation approach

### If Documentation Missing or Incomplete
1. **STOP completion process** immediately
2. **Complete ALL documentation** requirements
3. **Verify documentation** accuracy and completeness
4. **Update feature PRD** with final implementation details

---

## üìã ENHANCED QUICK REFERENCE COMMANDS

### Analysis Commands
```bash
# Search for existing related functionality
grep -r "pattern" src/
find src/ -name "*.py" -exec grep -l "pattern" {} \;

# Analyze current test coverage
source venv/bin/activate && python -m pytest tests/ --cov=src/lyfe_kt --cov-report=term

# Check for similar implementations
find src/ -name "*.py" -exec wc -l {} \; | sort -n
```

### Enhanced Testing Commands
```bash
# Run all tests with detailed output
source venv/bin/activate && python -m pytest tests/ -v --tb=short

# Run tests for specific module
source venv/bin/activate && python -m pytest tests/test_[module].py -v

# Run with coverage and HTML report
source venv/bin/activate && python -m pytest tests/ --cov=src/lyfe_kt --cov-report=html

# Test specific functionality
source venv/bin/activate && python -m pytest tests/ -k "test_pattern" -v
```

### Implementation Verification Commands
```bash
# Check all implementations work together
source venv/bin/activate && python -c "from src.lyfe_kt import *; print('All imports successful')"

# Verify CLI still works
source venv/bin/activate && python -m lyfe_kt.cli --help

# Check for Python syntax errors
python -m py_compile src/lyfe_kt/*.py
```

---

## üéØ ENHANCED SUCCESS CRITERIA

### Definition of Done
- ‚úÖ **Current implementation analyzed** and documented
- ‚úÖ **Feature PRD created** with comprehensive requirements
- ‚úÖ **Implementation follows existing patterns** and reuses code appropriately
- ‚úÖ **All tests passing** (100% pass rate including existing tests)
- ‚úÖ **No regressions** in existing functionality
- ‚úÖ **TODO.md updated** with completion status and PRD reference
- ‚úÖ **Implementation documented** in appropriate summary file
- ‚úÖ **TODO list updated** using todo_write tool
- ‚úÖ **Integration verified** with existing components

### Quality Gates
- **No failing tests** in the entire test suite (existing + new)
- **No broken functionality** in existing features  
- **Complete documentation** for all new features with PRD
- **Proper error handling** following existing patterns
- **Code reuse** where appropriate to maintain DRY principle
- **Integration testing** with real data when possible

---

## üìû ENHANCED USER INTERACTION PROTOCOL

### Review Request Format
```
‚úÖ **TODO [NUMBER] ([TODO_NAME]) is now complete!**

## Current Implementation Analysis
[Summary of what was found in existing codebase]
[Code reuse opportunities that were leveraged]
[Integration points with existing systems]

## Feature PRD Created
üìÑ **PRD**: `docs/features/[todo-name]-feature.md`
[Brief summary of requirements and approach]

## Implementation Summary
[Detailed summary of what was implemented]
[How it integrates with existing code]

## Key Features Implemented
[List of major features with descriptions]

## Testing Results
- **New Tests**: [X] tests created
- **Existing Tests**: [Y] tests still passing
- **Total Pass Rate**: 100% ([X+Y]/[X+Y] tests passing)
- **Coverage**: [Z]% of new code covered

## Files Created/Modified
- **New Files**: [List with line counts]
- **Modified Files**: [List with changes summary]
- **PRD File**: `docs/features/[todo-name]-feature.md`

## Documentation Updated
- **TODO.md**: Updated with completion details and PRD reference
- **Implementation Summary**: [File where documented]

## Manual Testing Suggestions
[Specific testing scenarios for the user]
[Integration testing with existing components]
[Real data testing approaches]

## Current Project Status
- **Progress**: [X]% complete ([Y]/[Z] TODOs completed)
- **Next Phase**: TODO [NEXT_NUMBER] - [NEXT_DESCRIPTION]

Ready to proceed with **TODO [NEXT_NUMBER]**!
```

---

## üìä PROJECT METRICS TRACKING

### Implementation Metrics
- **Lines of Code**: Track growth in src/ directory
- **Test Coverage**: Maintain high coverage across all modules
- **Test Count**: Track total tests and pass rates
- **File Count**: Monitor codebase size and structure
- **Reuse Ratio**: Track how much existing code is reused vs. new code written

### Quality Metrics
- **Test Pass Rate**: Must maintain 100% for all implemented features
- **Documentation Completeness**: All features must have PRDs and implementation docs
- **Code Reuse**: Track DRY principle adherence
- **Integration Success**: Track successful integration with existing components

---

**üéØ REMEMBER: This enhanced protocol is MANDATORY for EVERY TODO implementation. The current implementation analysis and feature PRD creation are now required steps!**
description:
globs:
alwaysApply: false
---

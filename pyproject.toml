[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lyfe-supertask-knowledge"
version = "0.1.0"
description = "Intelligent system that transforms raw content into structured knowledge tasks for the Lyfe platform"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Lyfe Team", email = "dev@lyfe.com"},
]
keywords = ["ai", "knowledge", "education", "content-generation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "openai>=1.0.0",
    "pydantic>=2.0.0",
    "click>=8.0.0",
    "loguru>=0.7.0",
    "jsonschema>=4.0.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.0",
    "markdown>=3.4.0",
    "jinja2>=3.1.0",
    "aiofiles>=23.0.0",
    "httpx>=0.24.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.4.0",
    "pre-commit>=3.3.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "factory-boy>=3.2.0",
    "faker>=18.0.0",
]

[project.urls]
Homepage = "https://github.com/lyfe/supertask-knowledge"
Documentation = "https://github.com/lyfe/supertask-knowledge/docs"
Repository = "https://github.com/lyfe/supertask-knowledge.git"
Issues = "https://github.com/lyfe/supertask-knowledge/issues"

[project.scripts]
lyfe-kt = "lyfe_kt.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
lyfe_kt = ["templates/*", "config/*"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["lyfe_kt"]
known_third_party = ["openai", "pydantic", "click", "loguru"]

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "openai.*",
    "loguru.*",
    "yaml.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=src/lyfe_kt",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "openai: marks tests that require OpenAI API",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/lyfe_kt"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
] 